# Flexirol Migration + Optimization Project - Cursor AI Rules

## 🎯 PROJECT CONTEXT

**STRATEGIC APPROACH**: This is a MIGRATION + OPTIMIZATION project from WordPress + Vue 2 to Vue 3 + Pinia + PocketBase.
**KEY PRINCIPLE**: Preserve business logic exactly while modernizing architecture AND eliminating redundancies.
**TARGET MARKET**: Ecuador → USA expansion (requires flexible, scalable solutions)

Legacy code: `legacy-code/` folder → Modern SPA with universal Excel generation

## 🏗️ OPTIMIZED ARCHITECTURE

### Stack Components

- **Frontend**: Vue 3 + Composition API + Pinia + Vue Router + Bootstrap 5
- **Backend**: PocketBase (auth, CRUD, real-time subscriptions)
- **Excel**: XLSX.js client-side - **UNIVERSAL FORMAT** (no bank-specific formats)
- **Storage**: NO localStorage/sessionStorage - reactive state only
- **Styling**: Bootstrap 5 utility classes only

### Optimized File Structure

```
src/
├── stores/              # Pinia stores (business logic)
├── views/
│   ├── auth/           # Login, register
│   ├── shared/         # 🆕 Smart components (role-conditional)
│   │   ├── UsuariosView.vue      # Superadmin + Empresa
│   │   ├── SolicitudesView.vue   # Superadmin + Operador
│   │   └── ReportesView.vue      # Empresa + Operador
│   ├── superadmin/     # Exclusive superadmin functions
│   │   ├── EmpresasView.vue
│   │   ├── ConfigView.vue
│   │   └── ExcelUploadView.vue
│   └── usuario/        # End-user only
│       ├── BancosView.vue
│       └── DashboardView.vue
├── components/         # Reusable UI components
├── services/          # API services (PocketBase)
└── router/           # Vue Router config
```

## 🚀 OPTIMIZATION PRINCIPLES

### Smart Component Strategy

- **ONE intelligent component** instead of multiple role-specific duplicates
- **Conditional logic** based on user role within single component
- **Shared business logic** eliminates 70% code duplication

```javascript
// Pattern: Smart component with role conditions
const canManageAllUsers = computed(() => authStore.isSuperadmin)
const visibleUsers = computed(() => {
  return authStore.isSuperadmin ? allSystemUsers.value : myCompanyUsers.value
})
```

### Universal Excel Strategy

**ELIMINATED**: Bank-specific formats (Guayaquil 14-column special format, etc.)
**IMPLEMENTED**: Single universal format compatible with any bank worldwide

```javascript
// Universal Excel format (international compatibility)
const generateUniversalBankingExcel = (solicitudes) => {
  // Standard format: Tipo Cuenta | Número | Nombre | Identificación | Monto | Email
  // Works in Ecuador, USA, and globally
}
```

### Legacy Consolidation Rules

```
BEFORE (Legacy duplicates):
├── superadmin/UsuariosView.vue     # All users management
├── admin/UsuariosView.vue          # Company users (didn't exist)
└── CheckUsuariosView.vue           # Search/filters

AFTER (Optimized):
└── shared/UsuariosView.vue         # Smart component handles all cases
```

## 📋 MIGRATION + OPTIMIZATION WORKFLOW

### 1. Legacy Analysis Pattern

```
ANALYZE BOTH FILES:
├── legacy-code/[role]/js/[component].js    # Vue 2 logic
└── legacy-code/[role]/dashboard-[component].php  # Template + server logic

CONSOLIDATE INTO:
├── stores/[domain].js              # Business logic
└── views/shared/[Component]View.vue  # Smart UI component
```

### 2. Component Consolidation Strategy

**Priority Order:**

1. **Merge similar views** → Create smart shared components
2. **Eliminate CheckUsuarios** → Integrate into UsuariosView
3. **Simplify Excel** → Universal format only
4. **Clean architecture** → Remove redundant stores/functions

### 3. Role-Based Smart Components

```vue
<!-- Pattern: Single component, conditional behavior -->
<template>
  <div class="container mt-4">
    <!-- Superadmin sees everything -->
    <div v-if="authStore.isSuperadmin">
      <CompanySelector v-model="selectedCompany" />
      <AllUsersTable :users="allUsers" />
    </div>

    <!-- Company admin sees only their users -->
    <div v-else-if="authStore.isEmpresa">
      <MyUsersTable :users="myCompanyUsers" />
    </div>
  </div>
</template>

<script setup>
// Single component handles multiple roles intelligently
const users = computed(() => {
  if (authStore.isSuperadmin) return allSystemUsers.value
  if (authStore.isEmpresa) return myCompanyUsers.value
  return []
})
</script>
```

## 🔧 PINIA STORE STANDARDS

### Consolidated Store Pattern

```javascript
export const useUsersStore = defineStore('users', () => {
  // State
  const allUsers = ref([]) // For superadmin
  const companyUsers = ref([]) // For empresa
  const loading = ref(false)
  const error = ref(null)

  // Smart getters based on role
  const visibleUsers = computed(() => {
    const authStore = useAuthStore()
    if (authStore.isSuperadmin) return allUsers.value
    if (authStore.isEmpresa) return companyUsers.value
    return []
  })

  // Unified actions (no duplication)
  async function fetchUsers(scope = 'auto') {
    const authStore = useAuthStore()
    loading.value = true

    try {
      if (scope === 'auto') {
        scope = authStore.isSuperadmin ? 'all' : 'company'
      }

      if (scope === 'all') {
        const result = await api.collection('users').getList()
        allUsers.value = result.items
      } else {
        const result = await api.collection('users').getList(1, 50, {
          filter: `empresa_id="${authStore.user.empresa_id}"`,
        })
        companyUsers.value = result.items
      }
    } catch (err) {
      error.value = `Error fetching users: ${err.message}`
    } finally {
      loading.value = false
    }
  }

  return { allUsers, companyUsers, visibleUsers, fetchUsers }
})
```

## 📊 UNIVERSAL EXCEL STANDARDS

### Simplified Excel Generation

```javascript
// ELIMINATED: Complex bank-specific formats from legacy
// IMPLEMENTED: Universal international format

const generateUniversalExcel = (data, type = 'banking') => {
  const workbook = XLSX.utils.book_new()

  if (type === 'banking') {
    // Universal banking format (works globally)
    const excelData = data.map((item) => ({
      'Tipo Cuenta': item.tipo_cuenta === 'ahorros' ? 'Savings' : 'Checking',
      'Número Cuenta': item.numero_cuenta,
      Titular: item.propietario,
      Identificación: item.cedula,
      Monto: item.monto_aprobado,
      Email: item.email,
      Banco: item.banco_nombre,
    }))
  } else if (type === 'report') {
    // Universal report format
    const excelData = data.map((item) => ({
      Nombre: item.nombre,
      Empresa: item.empresa,
      Fecha: item.fecha,
      Monto: item.monto_solicitado,
      Estado: item.estado,
    }))
  }

  const worksheet = XLSX.utils.json_to_sheet(excelData)
  XLSX.utils.book_append_sheet(workbook, worksheet, 'Data')

  const filename = `${type}_${new Date().toISOString().split('T')[0]}.xlsx`
  XLSX.writeFile(workbook, filename)

  console.log(`Universal Excel generated: ${filename}`)
}
```

## 🔒 BUSINESS LOGIC PRESERVATION

### Critical Legacy Functions (Preserve Exactly)

```javascript
// From functions.php - MUST preserve exactly
const validateCedula = (cedula) => /^[0-9]{10}$/.test(cedula)

const habilitado_switch = (userInfo, companyInfo, userRequests) => {
  // EXACT legacy logic - don't modify
  if (!companyInfo.fecha_excel || companyInfo.fecha_excel === 'No creado') {
    return {
      enabled: false,
      message: 'Su Empresa no ha cargado sus Datos actualizados de Anticipos',
    }
  }

  if (userInfo.gearbox !== 'true' || companyInfo.gearbox !== 'true') {
    return { enabled: false, message: 'Usuario Bloqueado por Admin' }
  }

  // Continue with exact legacy logic...
}

// Bank account 24-hour verification rule
const isUnderVerification = (createdDate) => {
  const accountDate = new Date(createdDate)
  const currentDate = new Date()
  const timeDifference = currentDate - accountDate
  const oneDayInMs = 86400000
  return timeDifference <= oneDayInMs
}
```

## 📱 SMART COMPONENT PATTERNS

### Conditional Rendering by Role

```vue
<template>
  <div class="container mt-4">
    <!-- Universal header -->
    <div class="d-flex justify-content-between align-items-center mb-4">
      <h2>{{ pageTitle }}</h2>
      <button v-if="canCreate" @click="openCreateModal" class="btn btn-primary">
        <i class="fas fa-plus"></i> {{ createButtonText }}
      </button>
    </div>

    <!-- Smart filters (conditional) -->
    <div class="row mb-3">
      <!-- Company selector (superadmin only) -->
      <div v-if="authStore.isSuperadmin" class="col-md-4">
        <select v-model="selectedCompany" class="form-select">
          <option value="">Todas las empresas</option>
          <option v-for="company in companies" :key="company.id" :value="company.id">
            {{ company.name }}
          </option>
        </select>
      </div>

      <!-- Universal search -->
      <div class="col-md-4">
        <input v-model="searchTerm" class="form-control" placeholder="Buscar..." />
      </div>
    </div>

    <!-- Smart content based on role -->
    <component :is="currentComponent" :data="visibleData" @action="handleAction" />
  </div>
</template>

<script setup>
const authStore = useAuthStore()
const usersStore = useUsersStore()

// Smart computed properties
const pageTitle = computed(() => {
  if (authStore.isSuperadmin) return 'Gestión de Usuarios del Sistema'
  if (authStore.isEmpresa) return 'Mis Empleados'
  return 'Usuarios'
})

const canCreate = computed(() => authStore.isSuperadmin || authStore.isEmpresa)

const createButtonText = computed(() =>
  authStore.isSuperadmin ? 'Crear Usuario' : 'Crear Empleado',
)

const currentComponent = computed(() => {
  if (authStore.isSuperadmin) return 'AdminUsersTable'
  if (authStore.isEmpresa) return 'CompanyUsersTable'
  return 'ReadOnlyUsersTable'
})

const visibleData = computed(() => usersStore.visibleUsers)
</script>
```

## 🎨 BOOTSTRAP 5 OPTIMIZATION

### Streamlined UI Patterns

```vue
<!-- Unified table component (works for all roles) -->
<div class="table-responsive">
  <table class="table table-hover">
    <thead class="table-light">
      <tr>
        <th>Nombre</th>
        <th>Email</th>
        <th v-if="showCompanyColumn">Empresa</th>
        <th v-if="showAdvancedActions">Estado</th>
        <th class="text-end">Acciones</th>
      </tr>
    </thead>
    <tbody>
      <tr v-for="user in users" :key="user.id">
        <td>{{ user.full_name }}</td>
        <td>{{ user.email }}</td>
        <td v-if="showCompanyColumn">{{ user.empresa_nombre }}</td>
        <td v-if="showAdvancedActions">
          <span :class="getStatusClass(user.gearbox)">
            {{ user.gearbox === 'true' ? 'Activo' : 'Bloqueado' }}
          </span>
        </td>
        <td class="text-end">
          <button 
            v-if="canEdit(user)" 
            @click="editUser(user)" 
            class="btn btn-sm btn-outline-primary me-1"
          >
            <i class="fas fa-edit"></i>
          </button>
          <button 
            v-if="canDelete(user)" 
            @click="deleteUser(user)" 
            class="btn btn-sm btn-outline-danger"
          >
            <i class="fas fa-trash"></i>
          </button>
        </td>
      </tr>
    </tbody>
  </table>
</div>
```

## 🚫 OPTIMIZATION ANTI-PATTERNS

### What NOT to Do

- **DON'T create separate views** for similar functionality across roles
- **DON'T implement bank-specific Excel formats** - use universal format
- **DON'T duplicate validation logic** across stores
- **DON'T create CheckUsuarios** as separate view - integrate into UsuariosView
- **DON'T preserve outdated WordPress patterns** - optimize while migrating

### Legacy Elimination Rules

```javascript
// ELIMINATE these legacy patterns:
❌ Multiple views: superadmin/UsuariosView + admin/UsuariosView + CheckUsuarios
❌ Bank-specific Excel: Guayaquil format, Pacífico format, etc.
❌ Duplicate CRUD: Same logic in multiple stores
❌ Role-specific routes: /superadmin/usuarios vs /admin/usuarios

// REPLACE with optimized patterns:
✅ Single smart view: shared/UsuariosView with role conditions
✅ Universal Excel: One format for all banks globally
✅ Consolidated stores: Smart stores with role-based getters
✅ Dynamic routes: /usuarios with permission-based content
```

## 📚 OPTIMIZATION CHECKLIST

### Before Starting Component

- [ ] Identify similar components to consolidate
- [ ] Plan smart component with role conditions
- [ ] Eliminate redundant legacy patterns
- [ ] Design universal data formats

### During Development

- [ ] Build one smart component instead of multiple
- [ ] Implement universal Excel (no bank-specific formats)
- [ ] Use role-based conditional rendering
- [ ] Consolidate duplicate business logic

### Before Commit

- [ ] No duplicate components for similar functionality
- [ ] Universal formats implemented
- [ ] Smart role-based components working
- [ ] Legacy redundancies eliminated
- [ ] Code reduction achieved (target: 70% less)

## 🎯 SUCCESS CRITERIA

### Functional Parity + Optimization

- ✅ All legacy user flows preserved exactly
- ✅ 70% code reduction through consolidation
- ✅ Universal Excel works globally (Ecuador + USA)
- ✅ Smart components handle multiple roles
- ✅ Architecture ready for international expansion

### Modern + Scalable Standards

- ✅ Vue 3 Composition API with smart components
- ✅ Pinia with consolidated, role-aware stores
- ✅ Bootstrap 5 responsive with conditional UI
- ✅ Universal client-side Excel generation
- ✅ Scalable architecture for new markets

---

**OPTIMIZATION MANTRA**: One smart component beats three dumb ones. Universal format beats bank-specific chaos. Preserve business logic, eliminate technical debt.
