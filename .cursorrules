# FlexiRol V2 - Vuetify Migration Phase - Cursor AI Rules

## üéØ CURRENT PROJECT STATE

**MIGRATION STATUS**: 85% Complete - WordPress ‚Üí Vue 3 + PocketBase ‚úÖ DONE
**ACTIVE PHASE**: Bootstrap ‚Üí Vuetify + Tailwind UI framework migration
**DEADLINE**: 1 week for complete UI migration
**PRINCIPLE**: Change only UI skin, preserve business logic soul

## üèóÔ∏è TECH STACK (CURRENT)

```
Frontend: Vue 3 + Composition API + Vuetify + Tailwind + Pinia
Backend: PocketBase (auth, CRUD, real-time)
Excel: XLSX.js universal format
Icons: Material Design Icons (mdi)
Styling: Vuetify components + Tailwind utilities
Storage: Reactive state only (NO localStorage/sessionStorage)
```

## üöÄ MIGRATION RULES

### 1. UI MIGRATION ONLY

```
‚úÖ CHANGE: Bootstrap components ‚Üí Vuetify components
‚úÖ CHANGE: Bootstrap classes ‚Üí Tailwind/Vuetify classes
‚úÖ CHANGE: Modal triggers ‚Üí v-model reactive
‚úÖ CHANGE: Form validation display ‚Üí Vuetify patterns

‚ùå PRESERVE: All business logic in <script setup>
‚ùå PRESERVE: All stores and their functions
‚ùå PRESERVE: All API calls and data flow
‚ùå PRESERVE: All user roles and permissions
‚ùå PRESERVE: All validation rules and messages
```

### 2. COMPONENT MAPPING STANDARDS

```vue
<!-- Bootstrap ‚Üí Vuetify Direct Mappings -->

<!-- Buttons -->
<button class="btn btn-primary"> ‚Üí <v-btn color="primary" variant="elevated">
<button class="btn btn-outline-secondary"> ‚Üí <v-btn color="secondary" variant="outlined">

<!-- Cards -->
<div class="card"> ‚Üí <v-card>
<div class="card-header"> ‚Üí <v-card-title>
<div class="card-body"> ‚Üí <v-card-text>

<!-- Forms -->
<input class="form-control"> ‚Üí <v-text-field variant="outlined">
<select class="form-select"> ‚Üí <v-select variant="outlined">
<textarea class="form-control"> ‚Üí <v-textarea variant="outlined">

<!-- Tables -->
<table class="table table-hover"> ‚Üí <v-data-table>

<!-- Modals -->
<div class="modal fade" id="modal"> ‚Üí <v-dialog v-model="showModal">

<!-- Alerts -->
<div class="alert alert-success"> ‚Üí <v-alert type="success" variant="elevated">
```

### 3. VUETIFY PATTERNS

```vue
<!-- Consistent Vuetify Structure -->
<template>
  <v-container fluid>
    <v-row>
      <v-col cols="12">
        <v-card>
          <v-card-title>
            <v-icon class="mr-2">mdi-icon-name</v-icon>
            Title
            <v-spacer></v-spacer>
            <v-btn color="primary">Action</v-btn>
          </v-card-title>
          <v-card-text>
            <!-- Content -->
          </v-card-text>
        </v-card>
      </v-col>
    </v-row>
  </v-container>
</template>

<!-- Modal Pattern -->
<v-dialog v-model="showModal" max-width="600px" persistent>
  <v-card>
    <v-card-title>Modal Title</v-card-title>
    <v-card-text>
      <v-form ref="form" v-model="formValid">
        <!-- Form fields -->
      </v-form>
    </v-card-text>
    <v-card-actions>
      <v-spacer></v-spacer>
      <v-btn @click="closeModal">Cancelar</v-btn>
      <v-btn color="primary" :disabled="!formValid" @click="submit">
        Guardar
      </v-btn>
    </v-card-actions>
  </v-card>
</v-dialog>
```

### 4. SMART COMPONENT PRESERVATION

```vue
<!-- MAINTAIN: Smart role-based components -->
<template>
  <v-container>
    <!-- Superadmin exclusive -->
    <div v-if="authStore.isSuperadmin">
      <CompanySelector />
      <AllUsersTable />
    </div>

    <!-- Company admin only -->
    <div v-else-if="authStore.isEmpresa">
      <MyEmployeesTable />
    </div>
  </v-container>
</template>

<script setup>
// PRESERVE: All existing business logic
const authStore = useAuthStore()
const usersStore = useUsersStore()

// PRESERVE: All computed properties and methods
const visibleUsers = computed(() => {
  if (authStore.isSuperadmin) return usersStore.allUsers
  if (authStore.isEmpresa) return usersStore.companyUsers
  return []
})

// PRESERVE: All existing functions exactly
const handleSubmit = async () => {
  // Keep exact same logic
}
</script>
```

## üîí BUSINESS LOGIC PRESERVATION

### Critical Functions (DO NOT MODIFY)

```javascript
// From stores/system.js - PRESERVE EXACTLY
const validateCedula = (cedula) => /^[0-9]{10}$/.test(cedula)

const habilitado_switch = (userInfo, companyInfo, userRequests) => {
  // EXACT legacy logic - critical for business
  if (!companyInfo.fecha_excel || companyInfo.fecha_excel === 'No creado') {
    return {
      enabled: false,
      message: 'Su Empresa no ha cargado sus Datos actualizados de Anticipos',
    }
  }
  // ... continue with EXACT same logic
}

const isUnderVerification = (createdDate) => {
  // 24-hour bank account verification rule
  return new Date() - new Date(createdDate) <= 86400000
}
```

### User Roles Matrix (PRESERVE)

```
| Component | Superadmin | Empresa | Operador | Usuario |
|-----------|------------|---------|----------|---------|
| UsuariosView | ‚úÖ All | ‚úÖ Employees | ‚ùå | ‚ùå |
| SolicitudesView | ‚úÖ Process | ‚ùå | ‚úÖ Process | ‚úÖ Create |
| ReportesView | ‚úÖ Global | ‚úÖ Company | ‚úÖ Operations | ‚ùå |
| EmpresasView | ‚úÖ | ‚ùå | ‚ùå | ‚ùå |
| BancosView | ‚ùå | ‚ùå | ‚ùå | ‚úÖ |
```

## üì± VUETIFY SPECIFIC RULES

### 1. Icons Usage

```vue
<!-- Use MDI icons consistently -->
<v-icon>mdi-account</v-icon>
<!-- Users -->
<v-icon>mdi-domain</v-icon>
<!-- Companies -->
<v-icon>mdi-file-document</v-icon>
<!-- Requests -->
<v-icon>mdi-bank</v-icon>
<!-- Bank accounts -->
<v-icon>mdi-chart-line</v-icon>
<!-- Reports -->
<v-icon>mdi-cog</v-icon>
<!-- Settings -->
```

### 2. Form Validation

```vue
<!-- Vuetify validation pattern -->
<v-text-field
  v-model="userForm.cedula"
  label="C√©dula *"
  :rules="[rules.required, rules.cedula]"
  variant="outlined"
  maxlength="10"
  required
/>

<script setup>
const rules = {
  required: (v) => !!v || 'Campo requerido',
  email: (v) => /.+@.+\..+/.test(v) || 'Email inv√°lido',
  cedula: (v) => /^[0-9]{10}$/.test(v) || 'C√©dula debe tener 10 d√≠gitos',
}
</script>
```

### 3. Table Standards

```vue
<!-- Use v-data-table for complex tables -->
<v-data-table
  :headers="headers"
  :items="items"
  :loading="loading"
  :search="searchTerm"
  class="elevation-1"
>
  <template v-slot:item.status="{ item }">
    <v-chip
      :color="item.gearbox ? 'success' : 'error'"
      size="small"
      variant="elevated"
    >
      {{ item.gearbox ? 'Activo' : 'Bloqueado' }}
    </v-chip>
  </template>
  
  <template v-slot:item.actions="{ item }">
    <v-btn size="small" icon @click="editItem(item)">
      <v-icon>mdi-pencil</v-icon>
    </v-btn>
  </template>
</v-data-table>
```

## üìã MIGRATION CHECKLIST PER FILE

### Pre-Migration Analysis

- [ ] Identify all Bootstrap components in template
- [ ] Map each to exact Vuetify equivalent
- [ ] Identify all Bootstrap classes to replace
- [ ] Note any jQuery/Bootstrap JS usage

### During Migration

- [ ] Replace template Bootstrap ‚Üí Vuetify (preserve all v-model, @click)
- [ ] Update CSS classes Bootstrap ‚Üí Tailwind/Vuetify
- [ ] Convert modals to v-dialog with v-model
- [ ] Replace form validation display with Vuetify patterns
- [ ] Keep 100% of <script setup> logic unchanged

### Post-Migration Verification

- [ ] All user flows work identically
- [ ] All business validations preserved
- [ ] All API calls functioning
- [ ] All role permissions respected
- [ ] Responsive design maintained
- [ ] No console errors

## üö´ CRITICAL PROHIBITIONS

### NEVER CHANGE

- Store functions and business logic
- API service calls or data structures
- User permission logic or role checks
- Validation rules or error messages
- Excel generation logic (already universal)
- PocketBase integration
- Router configuration or guards

### ONLY CHANGE

- HTML template from Bootstrap ‚Üí Vuetify
- CSS classes from Bootstrap ‚Üí Tailwind/Vuetify
- Modal triggers from jQuery ‚Üí v-model
- Form presentation (keep validation logic)
- Icon presentation (FontAwesome ‚Üí MDI)

## üéØ SUCCESS CRITERIA

### Functional Parity

- All user workflows identical to Bootstrap version
- All business rules functioning exactly the same
- All forms validate with same rules
- All tables sort/filter identically
- All modals open/close properly

### UI Improvements

- Modern Material Design appearance
- Better mobile responsiveness
- Improved accessibility compliance
- Consistent icon usage (MDI)
- Enhanced user feedback (snackbars, loading states)

## üí° OPTIMIZATION OPPORTUNITIES

### During Migration, Also Fix

- Replace any remaining aria-hidden modal conflicts
- Improve loading states with v-skeleton-loader
- Add better error handling with v-alert
- Enhance mobile experience with v-bottom-sheet
- Add confirmation dialogs with v-dialog

### Performance Enhancements

- Use v-lazy for large lists
- Implement v-virtual-scroll for huge datasets
- Add proper loading indicators
- Optimize table rendering with virtual scrolling

---

**MIGRATION MANTRA**: "Preserve the soul (business logic), beautify the skin (UI components)"

## üìù USAGE PATTERN

When receiving migration requests, respond with:

1. **Analyze**: Current Bootstrap components
2. **Confirm**: Business logic to preserve
3. **Optimize**: Vuetify implementation with Tailwind utilities
4. **Verify**: Functional parity maintained
